_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[15],{LypB:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/getting-started/examples",function(){return t("YaYd")}])},YaYd:function(e,n,t){"use strict";t.r(n);var s=t("rePB"),a=t("Ff2n"),r=(t("q1tI"),t("7ljp")),o=t("CXQJ"),d=t.n(o),i=t("UY+1"),u=t("R9PV");function m(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}var c=function(e){return Object(i.withSSG)(d()({filename:"examples.md",route:"/getting-started/examples",meta:{},pageMap:[{name:"_app",route:"/_app"},{name:"advanced",children:[{name:"custom-styling",route:"/advanced/custom-styling"},{name:"meta.json",meta:{"custom-styling":"Custom styling"}}],route:"/advanced"},{name:"api-reference",children:[{name:"classes",children:[{name:"deepdesk-api",route:"/api-reference/classes/deepdesk-api"},{name:"deepdesk-sdk",route:"/api-reference/classes/deepdesk-sdk"},{name:"input-mediator",route:"/api-reference/classes/input-mediator"},{name:"meta.json",meta:{"deepdesk-sdk":"DeepdeskSDK","deepdesk-api":"DeepdeskAPI","input-mediator":"InputMediator"}}],route:"/api-reference/classes"},{name:"resources",children:[{name:"conversation",route:"/api-reference/resources/conversation"},{name:"meta.json",meta:{conversation:"Conversation","text-suggestion":"TextSuggestion","url-suggestion":"URLSuggestion","sticky-message":"StickyMessage"}},{name:"sticky-message",route:"/api-reference/resources/sticky-message"},{name:"text-suggestion",route:"/api-reference/resources/text-suggestion"},{name:"url-suggestion",route:"/api-reference/resources/url-suggestion"}],route:"/api-reference/resources"}],route:"/api-reference"},{name:"getting-started",children:[{name:"examples",route:"/getting-started/examples"},{name:"installation",route:"/getting-started/installation"},{name:"meta.json",meta:{installation:"Installation",usage:"Usage",examples:"Examples"}},{name:"usage",route:"/getting-started/usage"}],route:"/getting-started"},{name:"index",route:"/"},{name:"meta.json",meta:{index:"Introduction","getting-started":"Getting started",advanced:"Advanced","api-reference":"API reference"}}]},u.a))(e)};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.mdx)(c,function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?m(Object(t),!0).forEach((function(n){Object(s.a)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):m(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({components:n},t),Object(r.mdx)("h1",null,"Examples"),Object(r.mdx)("h2",null,"Vanilla js"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{className:"language-html",parentName:"pre"},'<form id="form">\n    <textarea id="input"></textarea>\n    <button type="submit">Submit</button>\n</form>\n')),Object(r.mdx)("pre",null,Object(r.mdx)("code",{className:"language-js",parentName:"pre"},"import { DeepdeskSDK } from '@deepdesk/deepdesk-sdk';\n\nconst formElement = document.getElementById('form');\nconst inputElement = document.getElementById('input');\nconst deepdeskSDK = new DeepdeskSDK({\n    deepdeskUrl: 'https://<accountname>.deepdesk.com/api',\n});\n\ndeepdeskSDK.getConversationBySessionId('123', {\n    attempts: 5,\n    retryDelay: 500,\n});\n\ndeepdeskSDK.setVisitorInfo({\n    visitorName: 'Anne',\n});\n\ndeepdeskSDK.setAgentInfo({\n    agentName: 'Sam de Pam',\n    agentNickname: 'Sam',\n});\n\ndeepdeskSDK.mount(inputElement);\n\ndeepdeskSDK.on('select-text-suggestion', suggestion => {\n    element.value = suggestion.text;\n});\n\ndeepdeskSDK.on('reset', suggestion => {\n    element.value = suggestion.text;\n});\n\nformElement.addEventListener('submit', async event => {\n    event.preventDefault();\n\n    await sendMessageToYourBackend(); // Handle submit ...\n\n    deepdeskSDK.notifySubmit();\n    element.value = '';\n\n    // Refresh suggestions\n    deepdeskSDK.refresh();\n});\n\n")),Object(r.mdx)("h2",null,"React Textarea"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{className:"language-jsx",parentName:"pre"},"import { DeepdeskSDK } from '@deepdesk/deepdesk-sdk';\n\nconst ControlledTextarea = () => {\n    const ref = useRef(null);\n    const [value, setValue] = useState('');\n\n    useEffect(() => {\n        const deepdeskSDK = new DeepdeskSDK({\n            deepdeskUrl: 'https://<accountname>.deepdesk.com/api',\n        });\n\n        deepdeskSDK.getConversationBySessionId('123', {\n            attempts: 5,\n            retryDelay: 500,\n        });\n\n        deepdeskSDK.setVisitorInfo({\n            visitorName: 'Anne',\n        });\n\n        deepdeskSDK.setAgentInfo({\n            agentName: 'Sam de Pam',\n            agentNickname: 'Sam',\n        });\n\n        deepdeskSDK.mount(ref.current);\n\n        deepdeskSDK.on('select-text-suggestion', suggestion => {\n            setValue(suggestion.text);\n        });\n\n        deepdeskSDK.on('reset', suggestion => {\n            setValue(suggestion.text);\n        });\n    }, []);\n\n    const handleSubmit = async event => {\n        event.preventDefault();\n\n        await sendMessageToYourBackend(); // Handle submit ...\n\n        deepdeskSDK.notifySubmit();\n        element.value = '';\n\n        // Refresh suggestions\n        deepdeskSDK.refresh();\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <textarea\n                ref={ref}\n                value={value}\n                onChange={e => setValue(e.target.value)}\n            />\n            <button type=\"submit\">Submit</button>\n        </form>\n    );\n};\n")),Object(r.mdx)("h2",null,"React DraftJs"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{className:"language-jsx",parentName:"pre"},"import { DeepdeskSDK } from '@deepdesk/deepdesk-sdk';\nimport { ContentState, Editor, EditorState } from 'draft-js';\n\nconst DraftJSInput = () => {\n    const ref = useRef(null);\n    const [editorState, setEditorState] = useState(() =>\n        EditorState.createWithContent(ContentState.createFromText('')),\n    );\n\n    useEffect(() => {\n        const deepdeskSDK = new DeepdeskSDK({\n            deepdeskUrl: 'https://<accountname>.deepdesk.com/api',\n        });\n\n        deepdeskSDK.getConversationBySessionId('123', {\n            attempts: 5,\n            retryDelay: 500,\n        });\n\n        deepdeskSDK.setVisitorInfo({\n            visitorName: 'Anne',\n        });\n\n        deepdeskSDK.setAgentInfo({\n            agentName: 'Sam de Pam',\n            agentNickname: 'Sam',\n        });\n\n        deepdeskSDK.mount(ref.current);\n\n        deepdeskSDK.on('select-text-suggestion', suggestion => {\n            const content = ContentState.createFromText(suggestion.text);\n            setEditorState(EditorState.createWithContent(content));\n        });\n\n        deepdeskSDK.on('reset', suggestion => {\n            const content = ContentState.createFromText(suggestion.text);\n            setEditorState(EditorState.createWithContent(content));\n        });\n    }, []);\n\n    const handleSubmit = async event => {\n        event.preventDefault();\n\n        await sendMessageToYourBackend(); // Handle submit ...\n\n        deepdeskSDK.notifySubmit();\n        element.value = '';\n\n        // Refresh suggestions\n        deepdeskSDK.refresh();\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div ref={ref}>\n                <Editor\n                    editorState={editorState}\n                    onChange={setEditorState}\n                />\n            </div>\n            <button type=\"submit\">Submit</button>\n        </form>\n    );\n};\n")))}p.isMDXComponent=!0,n.default=p}},[["LypB",0,2,1,3]]]);