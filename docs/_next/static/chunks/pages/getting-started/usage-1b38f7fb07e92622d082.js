_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[17],{CxbR:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/getting-started/usage",function(){return n("jsPR")}])},jsPR:function(e,t,n){"use strict";n.r(t);var s=n("rePB"),a=n("Ff2n"),o=(n("q1tI"),n("7ljp")),r=n("CXQJ"),i=n.n(r),c=n("UY+1"),d=n("R9PV");function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}var u=function(e){return Object(c.withSSG)(i()({filename:"usage.md",route:"/getting-started/usage",meta:{},pageMap:[{name:"_app",route:"/_app"},{name:"advanced",children:[{name:"custom-styling",route:"/advanced/custom-styling"},{name:"meta.json",meta:{"custom-styling":"Custom styling"}}],route:"/advanced"},{name:"api-reference",children:[{name:"classes",children:[{name:"deepdesk-api",route:"/api-reference/classes/deepdesk-api"},{name:"deepdesk-sdk",route:"/api-reference/classes/deepdesk-sdk"},{name:"input-mediator",route:"/api-reference/classes/input-mediator"},{name:"meta.json",meta:{"deepdesk-sdk":"DeepdeskSDK","deepdesk-api":"DeepdeskAPI","input-mediator":"InputMediator"}}],route:"/api-reference/classes"},{name:"resources",children:[{name:"conversation",route:"/api-reference/resources/conversation"},{name:"meta.json",meta:{conversation:"Conversation","text-suggestion":"TextSuggestion","url-suggestion":"URLSuggestion","sticky-message":"StickyMessage"}},{name:"sticky-message",route:"/api-reference/resources/sticky-message"},{name:"text-suggestion",route:"/api-reference/resources/text-suggestion"},{name:"url-suggestion",route:"/api-reference/resources/url-suggestion"}],route:"/api-reference/resources"}],route:"/api-reference"},{name:"getting-started",children:[{name:"examples",route:"/getting-started/examples"},{name:"installation",route:"/getting-started/installation"},{name:"meta.json",meta:{installation:"Installation",usage:"Usage",examples:"Examples"}},{name:"usage",route:"/getting-started/usage"}],route:"/getting-started"},{name:"index",route:"/"},{name:"meta.json",meta:{index:"Introduction","getting-started":"Getting started",advanced:"Advanced","api-reference":"API reference"}}]},d.a))(e)};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.mdx)(u,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){Object(s.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({components:t},n),Object(o.mdx)("h1",null,"Usage"),Object(o.mdx)("h3",null,"Mount the Deepdesk SDK"),Object(o.mdx)("p",null,"Instantiate the Deepdesk SDK and mount it on the agent's textarea in the customer engagement platform."),Object(o.mdx)("pre",null,Object(o.mdx)("code",{className:"language-jsx",parentName:"pre"},"// Instantiate the Deepdesk SDK\n// With <accountname>.deepdesk.com\n// OR <accountname>.staging.deepdesk.com.\nconst deepdeskSDK = new DeepdeskSDK({\n    deepdeskUrl: 'https://<accountname>.deepdesk.com/api',\n});\n\n// Retrieve an existing conversation\n// by platform's conversation/thread/case identifier.\n// This assumes that the webhooks have been implemented.\nawait deepdeskSDK.getConversationBySessionId('123', {\n    attempts: 3,\n});\n\n// Or, create a new conversation when webhook implementation is not possible.\nawait deepdeskSDK.createConversation({\n    platform: 'example', // name of platform\n    channel: 'chat', // 'chat' or 'messaging'\n    sessionId: '123', // platform's conversation/thread/case identifier\n    agentId: '456', // platform's agent identifier\n});\n\n// Set visitor info.\n// Used to replace in in the placeholder variables in the suggestions\n// \"Goodmorning {vistor_name}!\" -> \"Goodmorning Anne!\"\ndeepdeskSDK.setVisitorInfo({\n    visitorName: 'Anne',\n});\n\n// Set agent info.\n// Used to replace in in the placeholder variables in the suggestions\n// \"You are chatting with {agent_name}.\" -> \"You are chatting with Sam.\"\n// (Yes, {agent_name} uses `agentNickname` and not `agentName`)\ndeepdeskSDK.setAgentInfo({\n    agentName: 'Sam de Pam',\n    agentNickname: 'Sam',\n});\n\n// Get a reference to the agent's input element.\nconst inputElement = document.getElementById('textarea');\n\n// Update the input field when user selects a suggestion.\n// See 'Api Reference' > 'DeepdeskSDK' for more events.\ndeepdeskSDK.on('select-text-suggestion', suggestion => {\n    inputElement.value = suggestion.text;\n});\n\n// Update the input field when user resets / undoes suggestion selection.\ndeepdeskSDK.on('reset', suggestion => {\n    inputElement.value = suggestion.text;\n});\n\n// Mount the instance on the input element.\n// Should be after async `createConversation` or `getConversationBySessionId`\n// The SDK will render the tab completion and suggestions overlay.\n// And it will start listening to events.\ndeepdeskSDK.mount(inputElement);\n")),Object(o.mdx)("h3",null,"Notify message submit and refresh suggestions"),Object(o.mdx)("p",null,"Because the SDK can't realiably determine when the agent submits a message, the platform has to notify the SDK when an agent successfully submits a message, ",Object(o.mdx)("strong",{parentName:"p"},"but before the text input is cleared"),"."),Object(o.mdx)("pre",null,Object(o.mdx)("code",{className:"language-jsx",parentName:"pre"},"// After an agent successfully submit's a message,\n// but before the text input is emptied.\ndeepdeskSDK.notifySubmit();\n\n// The `notifySubmit` resets the text suggestions.\n// Refresh the suggestions after the message is sent to the platform's backend,\n// AND the Deepdesk webhook as been called.\n// Platform frontend --\x3e platform backend --\x3e Deepdesk webhook\ndeepdeskSDK.refresh();\n")))}p.isMDXComponent=!0,t.default=p}},[["CxbR",0,2,1,3]]]);